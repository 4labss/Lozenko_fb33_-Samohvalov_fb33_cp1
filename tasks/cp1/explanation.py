import math
import pandas as pd
from collections import Counter
# math ‚Äî –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π, –∑–æ–∫—Ä–µ–º–∞ log2 –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –µ–Ω—Ç—Ä–æ–ø—ñ—ó.
# pandas ‚Äî –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–∞–±–ª–∏—Ü—è–º–∏ (DataFrame) —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É Excel.
# Counter ‚Äî –∑—Ä—É—á–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —á–∞—Å—Ç–æ—Ç –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (–ª—ñ—Ç–µ—Ä, –±—ñ–≥—Ä–∞–º).

# –ú–∏ –æ–±–º–µ–∂—É—î–º–æ —Ç–µ–∫—Å—Ç –ª–∏—à–µ –±—É–∫–≤–∞–º–∏ —Ä–æ—Å—ñ–π—Å—å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É + –ø—Ä–æ–±—ñ–ª–æ–º.
# –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä –¥–æ–∑–≤–æ–ª—è—î –æ–±‚Äô—î–¥–Ω–∞—Ç–∏ –≤–µ–ª–∏–∫—ñ —Ç–∞ –º–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏.
# –ü–∞—Ä–∞–º–µ—Ç—Ä with_spaces –≤–∏–∑–Ω–∞—á–∞—î, —á–∏ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ —á–∞—Å—Ç–æ—Ç.
def clean_text(text, with_spaces=True):
    alphabet = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è "
    text = text.lower()  # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ –ª—ñ—Ç–µ—Ä–∏ –Ω–∞ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä
    text = "".join(ch for ch in text if ch in alphabet)  # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å–µ, —â–æ –Ω–µ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç—ñ
    if not with_spaces:
        text = text.replace(" ", "")  # –Ø–∫—â–æ –Ω–µ –≤—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–æ–±—ñ–ª–∏, –≤–∏–¥–∞–ª—è—î–º–æ —ó—Ö
    return text

# –§–æ—Ä–º—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –ª—ñ—Ç–µ—Ä–∞: —á–∞—Å—Ç–æ—Ç–∞.
# –ß–∞—Å—Ç–æ—Ç–∞ –ª—ñ—Ç–µ—Ä–∏ = —á–∏—Å–ª–æ –ø–æ—è–≤ –ª—ñ—Ç–µ—Ä–∏ / –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤ —É —Ç–µ–∫—Å—Ç—ñ.
# –¶–µ —ñ —î —ñ–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø–æ—è–≤–∏ —Å–∏–º–≤–æ–ª—É –¥–ª—è –µ–Ω—Ç—Ä–æ–ø—ñ—ó.
def letter_frequencies(text):
    total = len(text)
    counter = Counter(text)  # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–∂–Ω–æ—ó –ª—ñ—Ç–µ—Ä–∏
    return {ch: counter[ch] / total for ch in sorted(counter)}  # –í—ñ–¥–Ω–æ—Å–Ω—ñ —á–∞—Å—Ç–æ—Ç–∏

# –ë—ñ–≥—Ä–∞–º–∏ ‚Äî —Ü–µ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –∑ 2 —Å–∏–º–≤–æ–ª—ñ–≤.
# overlap=True: –±—ñ–≥—Ä–∞–º–∏ –π–¥—É—Ç—å –∑ –∫—Ä–æ–∫–æ–º 1 ‚Üí AB, BC, CD‚Ä¶ (–ø–µ—Ä–µ—Ç–∏–Ω–∞—é—Ç—å—Å—è)
# overlap=False: –∫—Ä–æ–∫ 2 ‚Üí AB, CD, EF‚Ä¶ (–Ω–µ –ø–µ—Ä–µ—Ç–∏–Ω–∞—é—Ç—å—Å—è)
# –ß–∞—Å—Ç–æ—Ç–∞ –±—ñ–≥—Ä–∞–º = —á–∏—Å–ª–æ –ø–æ—è–≤ –±—ñ–≥—Ä–∞–º–∏ / –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ–≥—Ä–∞–º.
def bigram_frequencies(text, overlap=True):
    step = 1 if overlap else 2  # overlap=True -> –ø–µ—Ä–µ—Ç–∏–Ω–∞—é—á—ñ –±—ñ–≥—Ä–∞–º–∏, —ñ–Ω–∞–∫—à–µ –±–µ–∑ –ø–µ—Ä–µ—Ç–∏–Ω—É
    bigrams = [text[i:i+2] for i in range(0, len(text)-1, step)]
    total = len(bigrams)
    counter = Counter(bigrams)
    return {bg: counter[bg]/total for bg in counter}  # –í—ñ–¥–Ω–æ—Å–Ω—ñ —á–∞—Å—Ç–æ—Ç–∏ –±—ñ–≥—Ä–∞–º

# –ï–Ω—Ç—Ä–æ–ø—ñ—è –®–µ–Ω–Ω–æ–Ω–∞:  H = -—Å—É–º–∞ (–∑–Ω–∏–∑—É —ñ=1 –∑–≤–µ—Ä—Ö—É n) ùëùùëñ * log –∑–∞ –æ—Å–Ω–æ–≤–æ—é 2 –≤—ñ–¥ ùëùùëñ
# –¥–µ ùëùùëñ  ‚Äî –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø–æ—è–≤–∏ —Å–∏–º–≤–æ–ª—É (–∞–±–æ –±—ñ–≥—Ä–∞–º–∏).
# –í–æ–Ω–∞ –ø–æ–∫–∞–∑—É—î —Å–µ—Ä–µ–¥–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ—Ç —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–∞ —Å–∏–º–≤–æ–ª.
# p > 0 ‚Äî —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ª–æ–≥–∞—Ä–∏—Ñ–º—É –≤—ñ–¥ –Ω—É–ª—è.
def entropy(freqs):
    return -sum(p * math.log2(p) for p in freqs.values() if p > 0)

# –ï–Ω—Ç—Ä–æ–ø—ñ—è –±—ñ–≥—Ä–∞–º –Ω–∞ 1 —Å–∏–º–≤–æ–ª = H(–±—ñ–≥—Ä–∞–º–∏) / 2, –±–æ –±—ñ–≥—Ä–∞–º–∞ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ 2 —Å–∏–º–≤–æ–ª—ñ–≤.
# –¢–∞–∫–∏–º —á–∏–Ω–æ–º –æ—Ç—Ä–∏–º—É—î–º–æ –µ–Ω—Ç—Ä–æ–ø—ñ—é –Ω–∞ —Å–∏–º–≤–æ–ª, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –ø–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –∑ H1.
def entropy_bigrams(freqs):
    return entropy(freqs)/2

# –ù–∞–¥–ª–∏—à–∫–æ–≤—ñ—Å—Ç—å (Redundancy) ‚Äî —Ü–µ –º—ñ—Ä–∞ –ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–æ—Å—Ç—ñ –º–æ–≤–∏: —Ñ–æ—Ä–º—É–ª–∞ —î –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª—ñ R
# –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ, R ‚âà 0 (–Ω–µ–º–∞—î –Ω–∞–¥–ª–∏—à–∫–æ–≤–æ—Å—Ç—ñ).
# –î–ª—è –ø—Ä–∏—Ä–æ–¥–Ω–æ—ó –º–æ–≤–∏, –¥–µ –¥–µ—è–∫—ñ –ª—ñ—Ç–µ—Ä–∏ –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è —á–∞—Å—Ç—ñ—à–µ ‚Äî R > 0.
def redundancy(H, alphabet_size):
    Hmax = math.log2(alphabet_size)
    return 1 - H / Hmax

# –°—Ç–≤–æ—Ä—é—î –º–∞—Ç—Ä–∏—Ü—é —á–∞—Å—Ç–æ—Ç –±—ñ–≥—Ä–∞–º.
# –†—è–¥–∫–∏ ‚Üí –ø–µ—Ä—à–∏–π —Å–∏–º–≤–æ–ª, —Å—Ç–æ–≤–ø—Ü—ñ ‚Üí –¥—Ä—É–≥–∏–π —Å–∏–º–≤–æ–ª.
# –î–ª—è –∫–æ–∂–Ω–æ—ó –±—ñ–≥—Ä–∞–º–∏ —Å—Ç–∞–≤–∏–º–æ —ó—ó —á–∞—Å—Ç–æ—Ç—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É.
def bigram_matrix(freqs):
    letters = sorted(set("".join(freqs.keys())))  # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏
    df = pd.DataFrame(0.0, index=letters, columns=letters)
    for bg, p in freqs.items():
        df.loc[bg[0], bg[1]] = round(p, 4)
    return df

# –°–ø–µ—Ä—à—É –æ—á–∏—â—É—î–º–æ —Ç–µ–∫—Å—Ç (–∞–ª—Ñ–∞–≤—ñ—Ç + –ø—Ä–æ–±—ñ–ª–∏).
def analyze_text(text, with_spaces=True):
    text = clean_text(text, with_spaces)

# H1 ‚Äî –µ–Ω—Ç—Ä–æ–ø—ñ—è –Ω–∞ —Å–∏–º–≤–æ–ª –¥–ª—è –ª—ñ—Ç–µ—Ä.
# R1 ‚Äî –Ω–∞–¥–ª–∏—à–∫–æ–≤—ñ—Å—Ç—å –¥–ª—è 1-—Å–∏–º–≤–æ–ª—å–Ω–æ—ó –º–æ–¥–µ–ª—ñ.
    letter_freq = letter_frequencies(text)
    H1 = entropy(letter_freq)
    R1 = redundancy(H1, len(letter_freq))

# –†–∞—Ö—É—î–º–æ —á–∞—Å—Ç–æ—Ç–∏ –±—ñ–≥—Ä–∞–º –∑ –ø–µ—Ä–µ—Ç–∏–Ω–æ–º —Ç–∞ –±–µ–∑.
    bigram_overlap = bigram_frequencies(text, overlap=True)
    bigram_nonoverlap = bigram_frequencies(text, overlap=False)

# –ï–Ω—Ç—Ä–æ–ø—ñ—è –±—ñ–≥—Ä–∞–º –Ω–∞ 1 —Å–∏–º–≤–æ–ª.
    H2_overlap = entropy_bigrams(bigram_overlap)
    H2_nonoverlap = entropy_bigrams(bigram_nonoverlap)

# –ù–∞–¥–ª–∏—à–∫–æ–≤—ñ—Å—Ç—å –¥–ª—è –º–æ–¥–µ–ª–µ–π –±—ñ–≥—Ä–∞–º –∑ –ø–µ—Ä–µ—Ç–∏–Ω–æ–º —Ç–∞ –±–µ–∑.
# –ß–∏–º –±—ñ–ª—å—à–µ R, —Ç–∏–º –º–æ–≤–∞ –ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω—ñ—à–∞.
    R2_overlap = redundancy(H2_overlap, len(bigram_overlap))
    R2_nonoverlap = redundancy(H2_nonoverlap, len(bigram_nonoverlap))

# –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É —Å–ª–æ–≤–Ω–∏–∫—É, –∑—Ä—É—á–Ω–æ–º—É –¥–ª—è Excel.
    return {
        "letters": letter_freq,
        "bigrams_overlap": bigram_overlap,
        "bigrams_nonoverlap": bigram_nonoverlap,
        "H1": H1, "R1": R1,
        "H2_overlap": H2_overlap, "R2_overlap": R2_overlap,
        "H2_nonoverlap": H2_nonoverlap, "R2_nonoverlap": R2_nonoverlap
    }

# –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–∏–≥–∏ –≤ UTF-8.
with open("Bulgakov_Mihail_Master_i_Margarita.txt", encoding="utf-8") as f:
    text = f.read()

# –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—Ç–æ—Ç, –µ–Ω—Ç—Ä–æ–ø—ñ—ó —Ç–∞ –Ω–∞–¥–ª–∏—à–∫–æ–≤–æ—Å—Ç—ñ –¥–ª—è –¥–≤–æ—Ö –≤–∏–ø–∞–¥–∫—ñ–≤:
# –ó –ø—Ä–æ–±—ñ–ª–∞–º–∏
# –ë–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤
res_spaces = analyze_text(text, with_spaces=True)
res_nospaces = analyze_text(text, with_spaces=False)

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å—Ç–æ—Ç–∏ –ª—ñ—Ç–µ—Ä —É Excel.
# sheet_name ‚Äî –Ω–∞–∑–≤–∏ –∞—Ä–∫—É—à—ñ–≤.
with pd.ExcelWriter("crypto_analysis.xlsx") as writer:
    
    pd.DataFrame(list(res_spaces["letters"].items()), columns=["–õ—ñ—Ç–µ—Ä–∞", "–ß–∞—Å—Ç–æ—Ç–∞"]) \
        .to_excel(writer, sheet_name="Letters_Spaces", index=False)
    pd.DataFrame(list(res_nospaces["letters"].items()), columns=["–õ—ñ—Ç–µ—Ä–∞", "–ß–∞—Å—Ç–æ—Ç–∞"]) \
        .to_excel(writer, sheet_name="Letters_NoSpaces", index=False)

#     –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–∞—Ç—Ä–∏—Ü—ñ –±—ñ–≥—Ä–∞–º:
# –∑ –ø–µ—Ä–µ—Ç–∏–Ω–æ–º / –±–µ–∑ –ø–µ—Ä–µ—Ç–∏–Ω—É
# –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏ / –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤
    bigram_matrix(res_spaces["bigrams_overlap"]).to_excel(writer, sheet_name="Bigrams_Ov_Spaces")
    bigram_matrix(res_spaces["bigrams_nonoverlap"]).to_excel(writer, sheet_name="Bigrams_NonOv_Spaces")
    bigram_matrix(res_nospaces["bigrams_overlap"]).to_excel(writer, sheet_name="Bigrams_Ov_NoSpaces")
    bigram_matrix(res_nospaces["bigrams_nonoverlap"]).to_excel(writer, sheet_name="Bigrams_NonOv_NoSpaces")

# –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤–µ–¥–µ–Ω—É —Ç–∞–±–ª–∏—Ü—é –∑ –µ–Ω—Ç—Ä–æ–ø—ñ—è–º–∏ —ñ –Ω–∞–¥–ª–∏—à–∫–æ–≤—ñ—Å—Ç—é –¥–ª—è –≤—Å—ñ—Ö –º–æ–¥–µ–ª–µ–π.
# round(..., 5) ‚Äî –¥–ª—è –∞–∫—É—Ä–∞—Ç–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.
    summary = pd.DataFrame({
        "–ú–µ—Ç—Ä–∏–∫–∞": ["H1", "R1", "H2_–ü–µ—Ä–µ—Ç–∏–Ω", "R2_–ü–µ—Ä–µ—Ç–∏–Ω", "H2_–ë–µ–∑_–ü–µ—Ä–µ—Ç–∏–Ω", "R2_–ë–µ–∑_–ü–µ—Ä–µ—Ç–∏–Ω"],
        "–ó –ø—Ä–æ–±—ñ–ª–∞–º–∏": [
            round(res_spaces["H1"], 5), round(res_spaces["R1"], 5),
            round(res_spaces["H2_overlap"], 5), round(res_spaces["R2_overlap"], 5),
            round(res_spaces["H2_nonoverlap"], 5), round(res_spaces["R2_nonoverlap"], 5)
        ],
        "–ë–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤": [
            round(res_nospaces["H1"], 5), round(res_nospaces["R1"], 5),
            round(res_nospaces["H2_overlap"], 5), round(res_nospaces["R2_overlap"], 5),
            round(res_nospaces["H2_nonoverlap"], 5), round(res_nospaces["R2_nonoverlap"], 5)
        ]
    })
    summary.to_excel(writer, sheet_name="Summary", index=False)

print("Result saved to crypto_analysis.xlsx")